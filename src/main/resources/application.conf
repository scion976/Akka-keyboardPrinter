# In this file you can override any option defined in the reference files.
# Copy in parts of the reference files and modify as you please.

akka {

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  extensions = ["kamon.statsd.StatsD", "kamon.play.Play"]

  debug {
    # enable DEBUG logging of actor lifecycle changes
    lifecycle = on
  }

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  akka.actor.deployment {
    /router {
      router = round-robin-pool
      resizer {
        enabled = on

        # The fewest number of routees the router should ever have.
        lower-bound = 3

        # The most number of routees the router should ever have.
        # Must be greater than or equal to lower-bound.
        upper-bound = 5
      }
    }
  }

  blockingTimerDispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 1
    }
  }
}

#kamon.util.filters {
#  "akka.tracked-actor" {
#    includes = [ "*" ]
#    excludes = [ "helloAkka/user/howdyGreeter" ]
#  }
#
#  "akka.tracked-dispatcher" {
#    includes = [ "*" ]
#  }
#
#  "akka.traced-actor" {
#    includes = [ "*" ]
#  }
#
#  "test" {
#    includes = [ "**" ]
#  }
#}

# Kamon Metrics
# ~~~~~~~~~~~~~~

kamon {

   trace{
    level-of-detail = simple-trace
   }

  metric {

    # Time interval for collecting all metrics and send the snapshots to all subscribed actors.
    tick-interval = 10 seconds

    # Disables a big error message that will be typically logged if your application wasn't started
    # with the -javaagent:/path-to-aspectj-weaver.jar option. If you are only using KamonStandalone
    # it might be ok for you to turn this error off.
    disable-aspectj-weaver-missing-error = false

    # Specify if entities that do not match any include/exclude filter should be tracked.
    track-unmatched-entities = yes

    filters {
      akka-actor {
        includes = ["**"]
        excludes = [ "*/system/**", "*/user/IO-**", "*kamon*" ]
      }

      akka-router {
        includes = ["**"]
        excludes = []
      }

      akka-dispatcher {
        includes = ["**", "akka.actor.default-dispatcher"]
        excludes = []
      }

      trace {
        includes = [ "**" ]
        excludes = [ ]
      }
    }
  }


  # Controls whether the AspectJ Weaver missing warning should be displayed if any Kamon module requiring AspectJ is
  # found in the classpath but the application is started without the AspectJ Weaver.
  show-aspectj-missing-warning = yes

  metric-subscriptions {
    histogram       = [ "**" ]
    min-max-counter = [ "**" ]
    gauge           = [ "**" ]
    counter         = [ "**" ]
    trace           = [ "**" ]
    trace-segment   = [ "**" ]
    akka-actor      = [ "**" ]
    akka-dispatcher = [ "**" ]
    akka-router     = [ "**" ]
    system-metric   = [ "**" ]
    http-server     = [ "**" ]
    exception       = [ "**" ]
  }

  # modules can be disabled at startup using yes/no arguments.
  modules {
    kamon-log-reporter.auto-start = yes
    kamon-system-metrics.auto-start = yes
    kamon-statsd.auto-start = no
    kamon-akka.auto-start = yes
  }
}
